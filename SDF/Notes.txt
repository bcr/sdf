05/18/2006 (Revision 7)

Man, argument (nee parameter) validation is cool. I added an SDFArgument attribute with a Required property and we're off to the races. I'm debating about whether or not we're going to continue handing down the Hashtable to the Evaluate method, or whether everything is going to be through properties. The Print expression looks like this now:

public class Print
{
	[SDFArgument(Required=true)]
	public string message
	{
		set
		{
		}
	}

    public void Evaluate(SDF sdf, Hashtable arguments)
    {
        Console.WriteLine(arguments["message"]);
    }
}

Note that the message property is present with an empty setter, and that he continues to get the argument from the hashtable in Evaluate. Not sure how I feel about all of this yet. This whole relationship between the hashtable and the properties is making me a bit queasy. But I'm not coming up with a nice way to do argument validation without properties.

One other thing I was thinking about was the fact that you could do something really neat with the arguments which might actually handle the validation aspect. Imagine something like this:

[SDFArgument(Required=true)]
public IPAddress ipaddress
{
	set
	{
		ipaddressVar = value;
	}
}

and if the framework did the right thing and called the static Parse method on IPAddress, and then gave that created object to the set method for the property. Any exception in parse would be reported. I gotta think about that.

TODO

* Parameter validation

    * Too many parameters

    * Richer parameter types

* Make makefile suck less

    * build to build directory
    
    * clean target
    
    * Smarter building of DLLs (.cs.dll rule or something)


05/18/2006 (Revision 6)

I added an SDF parameter to Evaluate, and a default expression called LoadExpressions. So now you can do:

LoadExpressions filename='SDF.Print.dll'

and the magic happens.

I'm thinking that parameter validation is coming next. LoadExpressions requires a filename that must exist, Print requires a message to print.

TODO

* Parameter validation

    * Required parameters
    
    * Too many parameters

* Make makefile suck less

    * build to build directory
    
    * clean target
    
    * Smarter building of DLLs (.cs.dll rule or something)


05/18/2006 (Revision 5)

It turns out that handling multiple expressions was trivial. Instead of using Regex.Match, use Regex.Matches. Sweeet.

foreach (Match match in regex.Matches(eval))

Nice. The syntax seems to hold up. Multiple expressions look like

Print message='foo'
Print message='bar'

which parses unambiguously, even with zero arguments.

TODO

* LoadExpressions expression to load all of the expressions in an assembly

* Make makefile suck less

    * build to build directory
    
    * clean target
    
    * Smarter building of DLLs (.cs.dll rule or something)

05/17/2006 (Revision 4)

Added a Makefile. Crappy, but exists. Two main targets -- "build" and "test".

TODO

* Handle more complex Eval with multiple expressions

* LoadExpressions expression to load all of the expressions in an assembly -- I think this may end up being the single "builtin" expression.

* Make makefile suck less

    * build to build directory
    
    * clean target
    
    * Smarter building of DLLs (.cs.dll rule or something)


05/17/2006 (Revision 3)

I moved Print and PrintUpper to a separate assembly (SDF.Print), and added SDF.LoadAssembly to read it. It's a little cheesed right now, since the filename is hardcoded in the unit test. I think that there's at least two major refactorings that need to happen:

* There needs to be some semblance of a build environment here. I've got two assemblies now, one dependent on the other. A quick poll on #mono yielded "use make" from Miguel, so that's about as good an answer I need ;).

* There needs to be some way to load assemblies from SDF itself.

The assembly loading was pretty trivial -- basically, given a filename, I can reuse the existing SDF.AddType to add all of his public classes. Works like a champ

public void AddAssembly(string assemblyFilename)
{
	Assembly assembly = Assembly.LoadFrom(assemblyFilename);
	foreach (Type type in assembly.GetExportedTypes())
	{
		AddType(type);
	}
}

it currently does not qualify the types -- the presumption is that every exported type is a type that would be fun to have accessible from SDF.

TODO

* Makefile

* Handle more complex Eval with multiple expressions

* LoadExpressions expression to load all of the expressions in an assembly -- I think this may end up being the single "builtin" expression.


05/17/2006 (Revision 2)

I moved the Print and PrintUpper implementations to their own class in preparation for the move to auto-discovery. Now I have the following:

class Print
{
    public void Evaluate(Hashtable arguments)
    {
        Console.WriteLine(arguments["message"]);
    }
}

The SDF class now maintains a registry of Type objects that are classes that implement expressions. The class name indicates the expression name. So you just call SDF.AddType for each class that implements an expression. When Eval is called, it looks up the type in the registry, instantiates a new instance with the default constructor, and then calls a method named Evaluate in order to execute it

Type type = (Type) expressions[expression];
object o = type.GetConstructor(new Type[0]).Invoke(null);
type.GetMethod("Evaluate").Invoke(o, new Object[] { arguments });

I chose not to use an interface for the Evaluate method. I just discover it by hand at execution time.

TODO

* Move Print and PrintUpper to their own assembly and discover them dynamically

* Handle more complex Eval with multiple expressions


05/17/2006 (Revision 1)

This was the first cut I made of SDF. Basically getting up to speed with the NUnit environment and the various regex features of C#. There are two main things I futzed around with for this version:

* I/O redirection. In order to measure how well things were going, I wanted to capture standard output. This worked out pretty well. The main thing that threw me was that System.Out is a read-only property (I tried assigning a new TextWriter to Console.Out and was denied). Turns out you have to use Console.SetOut to redirect. After I did that, things worked out great. I made a helper class to do this hooking, overriding ToString on the class to give back the data that has been written so far.

* Regular expressions. In order to process directives, I needed some way to parse them. The Regex class seems to work great. One thing I found interesting when working with this is that I could use mnemonic names to refer to the various pieces of each directive. So the regex:

Regex regex = new Regex(@"\s*(?<expression>\S+)(\s+(?<name>[^ \t=]+)\s*=\s*'(?<value>[^']+)')*");

gives me a hand because it allows me to pick through the resulting match groups by name. Extracting the name of the expression for instance is:

string expression = match.Groups["expression"].ToString();

and each of the name / value pairs for the arguments are in the "name" and "value" groups. Shoving those in a Hashtable was trivial:

Group names = match.Groups["name"];
Group values = match.Groups["value"];

Hashtable arguments = new Hashtable(names.Captures.Count);

for (int counter = 0;counter < names.Captures.Count;++counter)
{
	arguments[names.Captures[counter].ToString()] = values.Captures[counter].ToString();
}

so I'm pretty pleased with that.

I'm also pretty happy with the ability to use strings in a switch statement:

switch (expression)
{
	case "Print":
		Console.WriteLine(arguments["message"]);
		break;
		
	case "PrintUpper":
		Console.WriteLine(((string) arguments["message"]).ToUpper());
		break;
}

I don't think this will end up in the final code, but it was cool to mess with. But the Print and PrintUpper expressions are a good start to getting a feel as to how this is going to shape up. The unit tests are concise, and I use the I/O redirection to grab output and make sure it's what I expect:

[Test]
public void TestPrint()
{
	SDF.Eval("Print message='Hello, world'");

	Assert.AreEqual("Hello, world\n", this.output.ToString());
}

[Test]
public void TestPrintUpper()
{
	SDF.Eval("PrintUpper message='Hello, world'");

	Assert.AreEqual("HELLO, WORLD\n", this.output.ToString());
}

Fun stuff. I think tomorrow I'm going to mess with creating implementation classes for Print and PrintUpper. I'm thinking something along the lines of:

[SDFExpression]
class Print
{
    [SDFName]
    public string Name
    {
        get
        {
            return "Print";
        }
    }
    
    [SDFEvaluate]
    public void Evaluate(Hashtable arguments)
    {
        Console.WriteLine(arguments["message"]);
    }
}

I don't know whether or not I'm going to use class, property and method attributes to flag these, or whether I should just use a consistent naming convention. I'm pretty sure that [SDFExpression] will survive to mark classes that implement expressions, but I'm not sure that [SDFName] and [SDFEvaluate] will survive, since I don't think it's too constraining to just make those well known names. NUnit uses this pattern for their [SetUp] and [TearDown] attributes:

[SetUp]
public void SetUp()
{
	this.output = new StandardOutputRedirector();
}

[TearDown]
public void TearDown()
{
	this.output.Unhook();
}

and I'm not sure I agree. It might be nice to have the flexibility to call the SetUp method "George" or the TearDown method called "Martha", but is it really useful? I think I'm talking myself out of it.

Another thing is that I don't know if I'll ultimately end up sending down a Hashtable to Evaluate, or whether I'll use properties. You can see for Print how you could implement it as:

[SDFArgument]
public string message
{
    get
    {
        return this.message;
    }
    
    set
    {
        this.message = value;
    }
}

and then skip sending down the hashtable to the Evaluate method. You can also see how this might help come up with syntax validation -- for Print, the "message" argument is required. So you can have a constraint expressed in the attribute for the property. Something like:

[SDFArgument(Required=true)]

would indicate that the argument is required. Not sure yet. And I'm not sure enough about how attributes work to know if that's legal syntax. I definitely like it better than:

[SDFArgument(true)]

that is, it's more expressive to indicate exactly what's true instead of being position dependent and having to look up the attribute syntax.

Yeah, I think I'm talking myself into that. We'll see how it comes out, but I think it's likely that I'm going to use properties to store arguments, with attributes to indicate predicates and drive syntax validation. More complex interdependencies might be hard -- I guess we'll see when we get there. For instance, how do you express a constraint that the argument must be an IP address? Is it something like:

[SDFArgumentRegexConstraint(@"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")]

or do you allow extension attributes:

[SDFArgumentIPAddressConstraint]

One thing I'm not sure I have right now in Mono is generics. Note that the Hashtable is untyped. It seems that Hashtable<string,string> would make me feel better. But my goal right now is to be Mono-compatible to get some cross-platformability. Because as much as I have both Parallels and Boot Camp installed with Windows XP, I don't really want to work in Windows for a day-to-day environment. Not to start a religious war or nuthin'. I do know that Mono was "workin' on it", I just don't know enough to use it yet.

Some random thoughts:

* The parser might need to be smarter about Unicode. I'll jump off that bridge when I refactor parsing into its own world and give it a robust set of tests.

* I wonder how documentation is going to work. Like I don't know anything about how the docs generation works in C# -- should I do something like:

/// (docs for Print command goes here in XML)
[SDFExpression]
public class Print
.
.
.

or should it be:

[SDFDescription("(docs for Print command goes here in XML)")]

If the latter, then I can use that for both the expression description as well as the argument descriptions.